import at.klickverbot.theBlackboard.service.BackendFaultCodes;
import at.klickverbot.event.EventDispatcher;
import at.klickverbot.event.events.FaultEvent;
import at.klickverbot.event.events.ResultEvent;
import at.klickverbot.rpc.IOperation;
import at.klickverbot.theBlackboard.controller.auth.CaptchaAuthenticatorOperationEvent;
import at.klickverbot.theBlackboard.model.CaptchaRequest;
import at.klickverbot.theBlackboard.service.ICaptchaAuthService;

/**
 * Authenticaton IOperation generated by CaptchaAuthenticator for
 * IAuthenticator.authenticate().
 */
class at.klickverbot.theBlackboard.controller.auth.CaptchaAuthenticatorOperation
   extends EventDispatcher implements IOperation {

   public function CaptchaAuthenticatorOperation( service :ICaptchaAuthService,
      methodId :String ) {
      m_service = service;
      m_methodId = methodId;
   }

   public function execute() :Void {
      var operation :IOperation = m_service.getCaptcha( m_methodId );
      operation.addEventListener( ResultEvent.RESULT, this, handleGetResult );
      operation.addEventListener( FaultEvent.FAULT, this, dispatchEvent );
      operation.execute();
   }

   public function solve( solution :String ) :Void {
      var operation :IOperation = m_service.solveCaptcha( m_request.id, solution );
      operation.addEventListener( ResultEvent.RESULT, this, dispatchEvent );
      operation.addEventListener( FaultEvent.FAULT, this, handleSolveFault );
      operation.execute();
   }

   private function handleGetResult( event :ResultEvent ) :Void {
      m_request = new CaptchaRequest();
      m_request.id = Number( event.result );
      dispatchEvent( new CaptchaAuthenticatorOperationEvent(
         CaptchaAuthenticatorOperationEvent.REQUEST, this, m_request ) );
   }

   private function handleSolveFault( event :FaultEvent ) :Void {
      if ( event.faultCode == BackendFaultCodes.INVALID_CAPTCHA_SOLUTION ) {
         // If the user entered an invalid captcha solution, just start over.
         execute();
      } else {
         dispatchEvent( event );
      }
   }

   private var m_service :ICaptchaAuthService;
   private var m_methodId :String;
   private var m_request :CaptchaRequest;
}
